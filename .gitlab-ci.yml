# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
stages:          # List of stages for jobs, and their order of execution
  # - build
  - deploy

variables:
  # DOCKER_IMAGE: "chatsrv"
  # DOCKER_TAG: "0.0.2"
  #DOCKER_HOST: tcp://docker:2375
  #DOCKER_TLS_CERTDIR: ""

  # SERVER_IP: "172.29.4.37"
  # SERVER_USER: "ubuntu"
  # DEPLOY_PATH: "/home/gitlab-runner/ragbackend"
    DEPLOY_PATH: "/home/ubuntu"


#services:
#  - name: docker:dind
#    alias: docker
#    command: ["--tls=false"]

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   tags:
#     - ragback
#   script:
#     - pip install --cache-dir .pip-cache -r requirements.txt
#   cache:
#     paths:
#       - .pip-cache/



  #  - docker info
  # - export DOCKER_HOST=tcp://172.29.4.37:2375
  # - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
  # - docker save -o $DOCKER_IMAGE.tar $DOCKER_IMAGE:$DOCKER_TAG
  # - gzip ${DOCKER_IMAGE}.tar
  # - split -b 100m ${DOCKER_IMAGE}.tar.gz ${DOCKER_IMAGE}_part_
  # artifacts:
  #  paths:
  #    - ${DOCKER_IMAGE}_part_*



deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - ragback
  script:
    - cd $DEPLOY_PATH
    - bash deploy-srv.sh
    # - sudo pkill -f "make server"
    # - git clone http://172.29.4.49/2025seiii-ThunderForce/ragbackend.git $DEPLOY_PATH
    # - cd $DEPLOY_PATH
    # - python3 -m venv .venv
    # - source .venv/bin/activate
    # - pip install -r requirements.txt
    # #- sudo chown -R $SERVER_USER:$SERVER_USER $DEPLOY_PATH
    # - nohup make server > /dev/null 2>&1
    # - export DOCKER_HOST=tcp://172.29.4.37:2375
    # - docker load -i ${DOCKER_IMAGE}.tar
    # - docker run -d --name ${DOCKER_IMAGE} -p 8080:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}
  # before_script:
    # 安装 ssh-agent
    # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # - eval $(ssh-agent -s)
    # #- echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # - ldconfig -p | grep libcrypto
    # - mkdir -p ~/.ssh
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    # - chmod 600 ~/.ssh/id_rsa
    # - ssh-add ~/.ssh/id_rsa
    # - chmod 700 ~/.ssh
    # - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    # - chmod 644 ~/.ssh/known_hosts
    
  # environment: production
  # script:
    # - |
    #   if ssh ${SERVER_USER}@${SERVER_IP} "pgrep -f 'make server$' > /dev/null"; then
    #      ssh ${SERVER_USER}@${SERVER_IP}  "pkill -f 'make server$'"
    #   fi
    # # 创建远程目录（如果不存在）
    # - ssh ${SERVER_USER}@${SERVER_IP} "mkdir -p ${DEPLOY_PATH}"
    # - scp -r ./* ${SERVER_USER}@${SERVER_IP}:${DEPLOY_PATH}/
    # - ssh ${SERVER_USER}@${SERVER_IP} "cd ${DEPLOY_PATH} && python3 -m venv myenv && source myenv/bin/activate && pip install -r requirements.txt && make server > /dev/null 2>&1 & disown"

